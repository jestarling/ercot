#Housekeeping#
rm(list=ls())#
#
#Set working directory.#
setwd('/Users/jennstarling/UTAustin/Research/ercot')#
#
#Load functions.#
source('R Code/JS_DLM_FUNCTIONS_R.R')#
sourceCpp(file='R Code/JS_DLM_FUNCTIONS.cpp')
#Housekeeping#
rm(list=ls())#
#
#Set working directory.#
setwd('/Users/jennstarling/UTAustin/Research/ercot')#
#
#Load functions.#
source('R Code/JS_DLM_FUNCTIONS.R')#
sourceCpp(file='R Code/JS_DLM_FUNCTIONS.cpp')
#Read in data.#
y_all = readRDS('R Data Objects/dlm_y_allzones.rda')#
F_all = readRDS('R Data Objects/dlm_F_allzones.rda')#
G_all = readRDS('R Data Objects/dlm_G_allzones.rda')#
#
n_all = unlist(lapply(y_all,nrow))	#Sample sizes for each zone.#
p_all = unlist(lapply(F_all,ncol))	#Number of predictors for each zone. #
#
n.zones = length(y_all)				#Number of zones.#
#
#================================================================#
# Check Model Fit: ==============================================#
#================================================================#
#
#Empty list to hold fit info for each zone.#
zone_fit = list()
Sys.time()	#Begin system time.#
#
#Loop through zones.#
for (zone in 1:n.zones){#
	### Extract zone information.#
#
	#Extract DLM known data for selected zone.#
	n = n_all[[zone]]#
	p = p_all[[zone]]#
#
	y = y_all[[zone]][,1,drop=T] #
	F = F_all[[zone]]#
	G = G_all[[zone]]#
	#-----------------------------------------------------------#
	#De-mean and scale data.#
	ybar = mean(y)	#Save mean for un-scaling later.#
	y = c(scale(y))#
	F = as.matrix(cbind.data.frame(int=F[,1],scale(F[,2:4]),F[,5:p]))#
	#-----------------------------------------------------------#
	#Set up hyperparameters.  (Same for all zones.)#
	m0 = rep(0,p)#
	C0 = diag(10,p)#
#
	# v ~ IG(.5,.5)#
	a.y = 1#
	b.y = 2	#
#
	# w_i ~ IG(.5,.5)#
	a.theta = rep(1,p)#
	b.theta = rep(2,p)#
#
	#-----------------------------------------------------------#
	# Testing model fit for windows of data of size 10000, forecasting 100 hours into future for each window.#
	zone_fit[[zone]] = dlm.fittest.cv(y,F,G,K=100,m0,C0,a.y=1,b.y=2,a.theta,b.theta,win.size=10000,iter=11000,burn=1000)#
	print(paste('Zone ',zone,' finished at ',Sys.time())) #Print finish time for each zone.#
}
Sys.time()	#Begin system time.#
#
#Loop through zones.#
for (zone in 1:n.zones){#
	### Extract zone information.#
#
	#Extract DLM known data for selected zone.#
	n = n_all[[zone]]#
	p = p_all[[zone]]#
#
	y = y_all[[zone]][,1,drop=T] #
	F = F_all[[zone]]#
	G = G_all[[zone]]#
	#-----------------------------------------------------------#
	#De-mean and scale data.#
	ybar = mean(y)	#Save mean for un-scaling later.#
	y = c(scale(y))#
	F = as.matrix(cbind.data.frame(int=F[,1],scale(F[,2:4]),F[,5:p]))#
	#-----------------------------------------------------------#
	#Set up hyperparameters.  (Same for all zones.)#
	m0 = rep(0,p)#
	C0 = diag(10,p)#
#
	# v ~ IG(.5,.5)#
	a.y = 1#
	b.y = 2	#
#
	# w_i ~ IG(.5,.5)#
	a.theta = rep(1,p)#
	b.theta = rep(2,p)#
#
	#-----------------------------------------------------------#
	# Testing model fit for windows of data of size 10000, forecasting 100 hours into future for each window.#
	zone_fit[[zone]] = dlm.fittest.cv(y,F,G,K=100,m0,C0,a.y=1,b.y=2,a.theta,b.theta,win.size=10000,iter=1100,burn=1000)#
	print(paste('Zone ',zone,' finished at ',Sys.time())) #Print finish time for each zone.#
}
names(zone_fit)
ls()
length(zone_fit)
zone_fit[[1]]
zone_fit[[1]]$mse
names(zone_fit[[1]])
plot(zone_fit[[1]]$y.pred,type='l',col='blue')#
lines(zone_fit[[1]]$y.known,type='l')
cbind(zone_fit[[1]]$y.pred,zone_fit[[1]]$y.known)
dim(zone_fit[[1]]$y.pred)
mean(zone_fit[[1]]$mse)
ybar = lapply(y_all,mean)
y_all
class(y_all)
ybar = lapply(y_all,colMeans)
ybar
library(matrixStats)
ysig = unlist(lapply(y_all,colSds))
ysig = unlist(lapply(y_all,colSds))
# ysig = unlist(lapply(y_all,sd))
ysig
ysig = unlist(lapply(y_all,sd))
ysig = unlist(lapply(y_all,colSds))
ysig = unlist(lapply(y_all,colVars))
length(y_all)
class(y_all[[1]])
ysig = unlist(lapply(y_all,function(x) colSds(as.matrix(x)))
)
ysig
sd(y_all[[1]])
sd(as.matrix(y_all[[1]]))
ybar = unlist(lapply(y_all,colMeans))#
ysig = unlist(lapply(y_all,function(x) colSds(as.matrix(x))))
zone_fit[[1]]$mse#
mean(zone_fit[[1]]$mse)#
#
cbind(zone_fit[[1]]$y.pred,zone_fit[[1]]$y.known)#
#
par(mfrow=c(3,3)) #One plot per window.#
#
for (i in 1:length(zone_fit$mse)){#
	y.p = zone_fit[[1]]$y.pred[,i]#
	y.k = zone_fit[[1]]$y.known[,i]#
	plot(y.p,col='blue')#
	points(y.k,col='red')#
}
i=1
y.p = zone_fit[[1]]$y.pred[,i]#
	y.k = zone_fit[[1]]$y.known[,i]
names(zone_fit[[1]])
y.p = zone_fit[[1]]$y.pred[,i]#
	y.k = zone_fit[[1]]$y.known[,i]#
	err = zone_fit[[1]]$error#
	plot(err)
err = zone_fit[[1]]$error[,i]
plot(err)
plot(err,type='l')
plot(y.p,col='blue',type='l')
plot(y.p,col='blue',type='l')#
	points(y.k,col='red')
plot(y.p,col='blue',type='l',ylim=c(-2,2))#
	points(y.k,col='red',type='l')
plot(y.p,col='blue',type='l',ylim=c(-2,2))#
	points(y.k,col='black',type='l')#
	points(err,col='red',type='l')
#COAST PLOTTING#
zone_fit[[1]]$mse#
mean(zone_fit[[1]]$mse)#
#
cbind(zone_fit[[1]]$y.pred,zone_fit[[1]]$y.known)#
#
par(mfrow=c(3,3)) #One plot per window.#
#
for (i in 1:length(zone_fit$mse)){#
	y.p = zone_fit[[1]]$y.pred[,i]#
	y.k = zone_fit[[1]]$y.known[,i]#
	err = zone_fit[[1]]$error[,i]#
	plot(y.p,col='blue',type='l',ylim=c(-2,2))#
	points(y.k,col='black',type='l')#
	#points(err,col='red',type='l')#
}
dim(zone_fit[[1]]$y.pred)
dim(zone_fit[[1]]$error)
i=2
y.p = zone_fit[[1]]$y.pred[,i]#
	y.k = zone_fit[[1]]$y.known[,i]#
	err = zone_fit[[1]]$error[,i]
cbind(zone_fit[[1]]$y.pred,zone_fit[[1]]$y.known)#
#
par(mfrow=c(3,3)) #One plot per window.#
#
for (i in 1:length(zone_fit$mse)){#
	y.p = zone_fit[[1]]$y.pred[,i]#
	y.k = zone_fit[[1]]$y.known[,i]#
	err = zone_fit[[1]]$error[,i]#
	plot(y.p,col='blue',type='l',ylim=c(-2,2))#
	points(y.k,col='black',type='l')#
	#points(err,col='red',type='l')#
}
1:length(zone_fit$mse)
par(mfrow=c(3,3)) #One plot per window.#
#
for (i in 1:9){#
	y.p = zone_fit[[1]]$y.pred[,i]#
	y.k = zone_fit[[1]]$y.known[,i]#
	err = zone_fit[[1]]$error[,i]#
	plot(y.p,col='blue',type='l',ylim=c(-2,2))#
	points(y.k,col='black',type='l')#
	#points(err,col='red',type='l')#
}
#Rescaled plots.#
par(mfrow=c(3,3)) #One plot per window.#
for (i in 1:9){#
	yp.rescaled = zone_fit[[1]]$y.pred[,i]  * ysig[[1]] + ybar[[1]]#
	yk.rescaled = zone_fit[[1]]$y.known[,i] * ysig[[1]] + ybar[[1]]#
	err = yp.rescaled - yk.rescaled#
	mse = mean(err^2)#
	print(mse)#
	plot(yp.rescaled,col='blue',type='l')#
	points(yk.rescaled,col='black',type='l')#
}
range(yp.rescaled)
#Rescaled plots.#
par(mfrow=c(3,3)) #One plot per window.#
for (i in 1:9){#
	yp.rescaled = zone_fit[[1]]$y.pred[,i]  * ysig[[1]] + ybar[[1]]#
	yk.rescaled = zone_fit[[1]]$y.known[,i] * ysig[[1]] + ybar[[1]]#
	err = yp.rescaled - yk.rescaled#
	mse = mean(err^2)#
	print(mse)#
	plot(yp.rescaled,col='blue',type='l',ylim=c(0,30000))#
	points(yk.rescaled,col='black',type='l')#
}
#Plot un-rescaled data.#
pdf('/Users/jennstarling/UTAustin/Research/ercot/Figures/Coast_Scaled.pdf')#
par(mfrow=c(3,3)) #One plot per window.#
for (i in 1:9){#
	y.p = zone_fit[[1]]$y.pred[,i]#
	y.k = zone_fit[[1]]$y.known[,i]#
	err = zone_fit[[1]]$error[,i]#
	plot(y.p,col='blue',type='l',ylim=c(-2,2),main=paste('Coast, window',i))#
	points(y.k,col='black',type='l')#
}#
dev.off()#
#
#Rescaled plots.#
pdf('/Users/jennstarling/UTAustin/Research/ercot/Figures/Coast_UnScaled.pdf')#
par(mfrow=c(3,3)) #One plot per window.#
for (i in 1:9){#
	yp.rescaled = zone_fit[[1]]$y.pred[,i]  * ysig[[1]] + ybar[[1]]#
	yk.rescaled = zone_fit[[1]]$y.known[,i] * ysig[[1]] + ybar[[1]]#
	err = yp.rescaled - yk.rescaled#
	mse = mean(err^2)#
	print(mse)#
	plot(yp.rescaled,col='blue',type='l',ylim=c(0,30000),main=paste('Coast, window',i))#
	points(yk.rescaled,col='black',type='l')#
}#
dev.off()
pdf('/Users/jennstarling/UTAustin/Research/ercot/Figures/Coast_Scaled.pdf')#
par(mfrow=c(3,3)) #One plot per window.#
for (i in 1:9){#
	y.p = zone_fit[[1]]$y.pred[,i]#
	y.k = zone_fit[[1]]$y.known[,i]#
	err = zone_fit[[1]]$error[,i]#
	plot(y.p,col='blue',type='l',ylim=c(-3,3),main=paste('Coast, window',i))#
	points(y.k,col='black',type='l')#
}#
dev.off()
